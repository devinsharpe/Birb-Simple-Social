// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fulltextSearch", "fullTextIndex", "jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Profile {
  id   String @id
  user User   @relation(fields: [id], references: [id])

  name             String
  handle           String
  normalizedHandle String  @unique
  biography        String?
  location         String?
  website          String?
  avatarUrl        String? @default("https://source.unsplash.com/random/600×600/?cat")
  headerUrl        String? @default("https://source.unsplash.com/random/1920×1080/?cat")
  birthdate        String?

  followerCount  Int @default(0)
  followingCount Int @default(0)
  postCount      Int @default(0)

  canChangeHandle Boolean @default(true)

  followers ProfileRelationship[] @relation("followers")
  following ProfileRelationship[] @relation("following")

  followerRequests  RelationshipRequest[] @relation("followerRequests")
  followingRequests RelationshipRequest[] @relation("followingRequests")
  posts             Post[]                @relation("profilePosts")
  postMentions      PostMention[]         @relation("profileMentions")
  postReactions     PostReaction[]        @relation("postReactions")
  profileReaction   ProfileReaction[]     @relation("profileReactions")
  comments          Comment[]             @relation("userComments")
  commentLikes      CommentLike[]         @relation("userCommentLikes")

  @@index([id])
  @@fulltext([name, handle])
}

enum RequestStatus {
  PENDING   @map("PENDING")
  ACCEPTED  @map("ACCEPTED")
  CANCELLED @map("CANCELLED")
  DENIED    @map("DENIED")
  REMOVED   @map("REMOVED")
  FORCED    @map("FORCE_REMOVED")
}

enum RelationshipType {
  FOLLOW @map("FOLLOW")
  BLOCK  @map("BLOCK")
}

model RelationshipRequest {
  id String @id @default(cuid())

  status RequestStatus @default(PENDING)

  followerId  String
  followingId String

  follower  Profile @relation("followerRequests", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("followingRequests", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([followerId])
  @@index([followingId])
}

model ProfileRelationship {
  id String @id @default(cuid())

  type RelationshipType @default(FOLLOW)

  followerId  String
  followingId String

  follower  Profile @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  requestedAt DateTime

  @@index([followerId])
  @@index([followingId])
}

enum Theme {
  AUTO  @map("AUTO")
  LIGHT @map("LIGHT")
  DARK  @map("DARK")
}

model ProfileSettings {
  id String @id @default(cuid())

  reaction           Reaction @default(SMILE)
  catMode            Boolean  @default(false)
  theme              Theme    @default(AUTO)
  relativeTimestamps Boolean  @default(true)
}

enum PostReviewStatus {
  PROCESSING      @map("PROCESSING")
  APPROVED        @map("APPROVED")
  APPEALED        @map("APPEALED")
  REJECTED_AUTO   @map("REJECTED_AUTO")
  REJECTED_MANUAL @map("REJECTED_MANUAL")
}

enum PostType {
  IMAGE @map("IMAGE")
  TEXT  @map("TEXT")
}

enum Visibility {
  ACTIVE   @map("ACTIVE")
  ARCHIVED @map("ARCHIVED")
  REJECTED @map("REJECTED")
}

model Post {
  id            String           @id @default(cuid())
  text          String           @db.VarChar(300)
  location      String           @db.VarChar(32)
  reviewStatus  PostReviewStatus @default(PROCESSING)
  visibility    Visibility       @default(ACTIVE)
  likeCount     Int              @default(0)
  commentCount  Int              @default(0)
  reactionCount Int              @default(0)
  updateCount   Int              @default(0)
  type          PostType         @default(TEXT)
  profileId     String

  image String @default("")
  alt   String @default("") @db.VarChar(500)

  autoReviewedAt   DateTime?
  manualReviewedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  mentions  PostMention[]  @relation("mentions")
  postedBy  Profile        @relation("profilePosts", fields: [profileId], references: [id], onDelete: Cascade)
  reactions PostReaction[] @relation("reactions")
  comments  Comment[]      @relation("comments")

  @@index([profileId])
}

model PostMention {
  id        String @id @default(cuid())
  postId    String
  profileId String

  post    Post    @relation("mentions", fields: [postId], references: [id], onDelete: Cascade)
  profile Profile @relation("profileMentions", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([profileId])
}

model Comment {
  id           String           @id @default(cuid())
  postId       String
  profileId    String
  text         String
  reviewStatus PostReviewStatus @default(PROCESSING)
  visibility   Visibility       @default(ACTIVE)
  likeCount    Int              @default(0)
  commentId    String?

  autoReviewedAt   DateTime?
  manualReviewedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  parent   Comment?      @relation("children", fields: [commentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post     Post          @relation("comments", fields: [postId], references: [id], onDelete: Cascade)
  postedBy Profile       @relation("userComments", fields: [profileId], references: [id], onDelete: Cascade)
  likes    CommentLike[] @relation("likes")
  children Comment[]     @relation("children")

  @@index([commentId])
  @@index([postId])
  @@index([profileId])
}

model CommentLike {
  id        String @id @default(cuid())
  commentId String
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comment Comment @relation("likes", fields: [commentId], references: [id], onDelete: Cascade)
  profile Profile @relation("userCommentLikes", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([commentId])
  @@index([profileId])
}

enum Reaction {
  DOWNCAST        @map("DOWNCAST")
  FIRE            @map("FIRE")
  HEART           @map("HEART")
  HEART_EYES      @map("HEART_EYES")
  JOY             @map("JOY")
  PINCHED_FINGERS @map("PINCHED_FINGERS")
  SKULL           @map("SKULL")
  SMILE           @map("SMILE")
  THUMBS_UP       @map("THUMBS_UP")
  WEEPING         @map("WEEPING")
}

model PostReaction {
  id        String   @id @default(cuid())
  reaction  Reaction
  image     String
  postId    String
  profileId String

  createdAt DateTime @default(now())

  post    Post    @relation("reactions", fields: [postId], references: [id], onDelete: Cascade)
  profile Profile @relation("postReactions", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([profileId])
}

model ProfileReaction {
  id        String     @id @default(cuid())
  reaction  Reaction
  image     String
  status    Visibility @default(ACTIVE)
  profileId String

  createdAt DateTime @default(now())

  profile Profile @relation("profileReactions", fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
