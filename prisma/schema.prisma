// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fulltextSearch"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
  id   String @id
  user User   @relation(fields: [id], references: [id])

  name      String
  handle    String  @unique
  biography String?
  location  String?
  website   String?
  avatarUrl String? @default("https://source.unsplash.com/random/600×600/?cat")
  headerUrl String? @default("https://source.unsplash.com/random/1920×1080/?cat")
  birthdate String?

  photoAvailable Int @default(1)
  textAvailable  Int @default(3)

  followerCount  Int @default(0)
  followingCount Int @default(0)
  postCount      Int @default(0)

  canChangeHandle Boolean @default(true)

  followers ProfileRelationship[] @relation("followers")
  following ProfileRelationship[] @relation("following")

  followerRequests  RelationshipRequest[] @relation("followerRequests")
  followingRequests RelationshipRequest[] @relation("followingRequests")
}

enum RequestStatus {
  PENDING   @map("PENDING")
  ACCEPTED  @map("ACCEPTED")
  CANCELLED @map("CANCELLED")
  DENIED    @map("DENIED")
}

enum RelationshipType {
  FOLLOW @map("FOLLOW")
  BLOCK  @map("BLOCK")
}

model RelationshipRequest {
  id String @id @default(cuid())

  status RequestStatus @default(PENDING)

  followerId  String
  followingId String

  follower  Profile @relation("followerRequests", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("followingRequests", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProfileRelationship {
  id String @id @default(cuid())

  type RelationshipType @default(FOLLOW)

  followerId  String
  followingId String

  follower  Profile @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following Profile @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  requestedAt DateTime

  @@unique([followerId, followingId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
